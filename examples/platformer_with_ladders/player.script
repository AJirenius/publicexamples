local gravity = -20

function init(self)
	msg.post(".", "acquire_input_focus")
	self.velocity = vmath.vector3(0, 0, 0)
	self.ground_contact = false
	self.actions = {}
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	local gravity = vmath.vector3(0, gravity, 0)

	if self.actions[hash("left")] then
		self.velocity.x = -100
	elseif self.actions[hash("right")] then
		self.velocity.x = 100
	else
		self.velocity.x = 0
	end
	
	if self.ladder_contact then
		if self.actions[hash("up")] then
			self.velocity.y = 100
			self.ground_contact = true
			self.climbing = true
		elseif self.actions[hash("down")] then
			self.velocity.y = -100
			self.ground_contact = true
			self.climbing = true
		elseif self.climbing then
			self.velocity.y = 0
		end
	else
		self.climbing = false
	end
	
	if not self.ground_contact and not self.climbing then
		-- Apply gravity if there's no ground contact
		self.velocity = self.velocity + gravity
	end
	
	-- apply velocity to the player character
	go.set_position(go.get_position() + self.velocity * dt)
	
	-- reset volatile state
	self.correction = vmath.vector3()
	self.ground_contact = false
	self.ladder_contact = false
end

local function handle_geometry_contact(self, normal, distance)
	-- project the correction vector onto the contact normal
	-- (the correction vector is the 0-vector for the first contact point)
	local proj = vmath.dot(self.correction, normal)
	-- calculate the compensation we need to make for this contact point
	local comp = (distance - proj) * normal
	-- add it to the correction vector
	self.correction = self.correction + comp
	-- apply the compensation to the player character
	go.set_position(go.get_position() + comp)
	-- check if the normal points enough up to consider the player standing on the ground
	-- (0.7 is roughly equal to 45 degrees deviation from pure vertical direction)
	if normal.y > 0.7 then
		self.ground_contact = true
	end
	-- project the velocity onto the normal
	proj = vmath.dot(self.velocity, normal)
	-- if the projection is negative, it means that some of the velocity points towards the contact point
	if proj < 0 then
		-- remove that component in that case
		self.velocity = self.velocity - proj * normal
		self.velocity.x = 0
	end
end


function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		-- check if we received a contact point message. One message for each contact point
		if message.group == hash("ground") then
			handle_geometry_contact(self, message.normal, message.distance)
		elseif message.group == hash("ladder") then 
			self.ladder_contact = true
		end
	end
end

function on_input(self, action_id, action)
	if action_id then
		if action.pressed then
			self.actions[action_id] = true
		elseif action.released then
			self.actions[action_id] = nil
		end
		if action_id == hash("trigger") and action.pressed then
			self.velocity.y = 500
		end
	end
end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end
